# -*- coding: utf-8 -*-

import logging
import os
import asyncio
import threading
import requests
import time
from pyrogram import Client, filters, idle
from pyrogram.types import Message
from moviepy.editor import VideoFileClip
from moviepy.video.io.ffmpeg_tools import ffmpeg_extract_subclip
from flask import Flask, render_template_string

# Logging ‡¶∏‡ßá‡¶ü ‡¶Ü‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶®
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- Flask Web Server and Ping Service ---
flask_app = Flask(__name__)

# ‡¶è‡¶®‡¶≠‡¶æ‡¶Ø‡¶º‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶§‡¶•‡ßç‡¶Ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
PORT = int(os.getenv("PORT", "5000"))
RENDER_EXTERNAL_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")

@flask_app.route('/')
def home():
    """
    ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ HTML ‡¶™‡ßÉ‡¶∑‡ßç‡¶†‡¶æ ‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶Ø‡¶æ ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßá‡•§
    """
    html_content = """
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Bot Status</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                background-color: #f0f2f5;
                color: #333;
                text-align: center;
                padding-top: 50px;
            }
            .container {
                background-color: #fff;
                padding: 30px;
                border-radius: 10px;
                box-shadow: 0 4px 8px rgba(0,0,0,0.1);
                display: inline-block;
            }
            h1 {
                color: #28a745;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>TA File Share Bot is running! ‚úÖ</h1>
            <p>This page confirms that the bot's web server is active.</p>
        </div>
    </body>
    </html>
    """
    return render_template_string(html_content)

def ping_service():
    """
    ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶ï‡ßç‡¶∞‡¶Æ‡ßá ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡¶æ‡¶∞‡ßç‡¶®‡¶æ‡¶≤ ‡¶π‡ßã‡¶∏‡ßç‡¶ü‡¶®‡ßá‡¶Æ-‡¶è ‡¶™‡¶ø‡¶Ç ‡¶ï‡¶∞‡ßá ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏‡¶ï‡ßá ‡¶∏‡¶ö‡¶≤ ‡¶∞‡¶æ‡¶ñ‡ßá‡•§
    """
    if not RENDER_EXTERNAL_HOSTNAME:
        logger.info("Render URL ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á‡•§ ‡¶™‡¶ø‡¶Ç ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶®‡¶ø‡¶∑‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã‡•§")
        return

    url = f"http://{RENDER_EXTERNAL_HOSTNAME}"
    while True:
        try:
            response = requests.get(url, timeout=10)
            logger.info(f"Pinged {url} | ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ï‡ßã‡¶°: {response.status_code}")
        except requests.exceptions.RequestException as e:
            logger.error(f"‡¶™‡¶ø‡¶Ç ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {url}: {e}")
        time.sleep(600)  # ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡ßß‡ß¶ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü‡ßá ‡¶™‡¶ø‡¶Ç ‡¶ï‡¶∞‡ßÅ‡¶® (‡ß¨‡ß¶‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°)

def run_flask_and_ping():
    """
    ‡¶´‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ô‡ßç‡¶ï ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶™‡¶ø‡¶Ç ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡ßá‡•§
    """
    flask_thread = threading.Thread(target=lambda: flask_app.run(host="0.0.0.0", port=PORT, use_reloader=False))
    flask_thread.start()
    
    ping_thread = threading.Thread(target=ping_service)
    ping_thread.start()
    logger.info("‡¶´‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ô‡ßç‡¶ï ‡¶è‡¶¨‡¶Ç ‡¶™‡¶ø‡¶Ç ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

# --- ‡¶¨‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ---
# ‡¶è‡¶®‡¶≠‡¶æ‡¶Ø‡¶º‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶ü, API, ‡¶è‡¶¨‡¶Ç ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶§‡¶•‡ßç‡¶Ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
try:
    API_ID = int(os.getenv("API_ID"))
    API_HASH = os.getenv("API_HASH")
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    ADMIN_ID = int(os.getenv("ADMIN_ID"))
except (ValueError, TypeError) as e:
    logger.error(f"‡¶è‡¶®‡¶≠‡¶æ‡¶Ø‡¶º‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
    logger.error("‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡ßá API_ID ‡¶è‡¶¨‡¶Ç ADMIN_ID ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶æ‡¶ï‡¶ø‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶õ‡ßá‡•§")
    exit()

# ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ö‡¶∏‡ßç‡¶•‡¶æ‡¶Ø‡¶º‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
TEMP_DIR = "temp_videos"
if not os.path.exists(TEMP_DIR):
    os.makedirs(TEMP_DIR)

# Initialize the Pyrogram client
app = Client(
    "video_converter_bot",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)

async def progress_callback(current, total):
    """Callback function for showing download progress."""
    logger.info(f"Downloaded {current * 100 / total:.1f}%")

async def convert_video(input_path: str, output_path: str, message: Message):
    """
    Converts and compresses a video file with advanced settings.
    This function is run in a separate thread to avoid blocking the bot.
    """
    try:
        await message.reply_text("‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®... ‚è≥")
        clip = VideoFileClip(input_path)
        
        # Determine new resolution (e.g., scale to 720p if original is larger)
        target_height = 720
        if clip.h > target_height:
            resized_clip = clip.resize(height=target_height)
        else:
            resized_clip = clip
            
        resized_clip.write_videofile(
            output_path, 
            codec="libx264",
            audio_codec="aac",
            bitrate="1000k", # Adjust bitrate to control file size and quality
            preset="medium"  # 'ultrafast', 'fast', 'medium', 'slow' for trade-off between speed and size
        )
        
        clip.close()
        resized_clip.close()
        return True
    except Exception as e:
        logger.error(f"Error during video conversion: {e}")
        return False

@app.on_message(filters.command("start") & filters.private)
async def start_command(client: Client, message: Message):
    """Handles the /start command."""
    await message.reply_text(
        "‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶†‡¶æ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶∞ ‡¶Ü‡¶ï‡¶æ‡¶∞ ‡¶õ‡ßã‡¶ü ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶¨‡•§ "
        "‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ø‡¶¶‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶Ö‡¶Ç‡¶∂ ‡¶ï‡¶æ‡¶ü‡¶§‡ßá ‡¶ö‡¶æ‡¶®, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá `/cut <start> <end>` ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§"
    )

@app.on_message(filters.command("cut") & filters.private)
async def cut_command(client: Client, message: Message):
    """Handles the /cut command to trim videos."""
    if not message.reply_to_message or not message.reply_to_message.video:
        await message.reply_text("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞‡ßá `/cut <‡¶∂‡ßÅ‡¶∞‡ßÅ> <‡¶∂‡ßá‡¶∑>` ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§")
        return
    
    try:
        _, start_time, end_time = message.text.split()
        start_time, end_time = int(start_time), int(end_time)
        if start_time < 0 or end_time < 0 or start_time >= end_time:
            await message.reply_text("‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÄ‡¶Æ‡¶æ‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶Ø‡¶º‡•§ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶∂‡ßá‡¶∑ ‡¶∏‡¶Æ‡¶Ø‡¶º‡ßá‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶Æ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§")
            return
    except (ValueError, IndexError):
        await message.reply_text("‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: `/cut <‡¶∂‡ßÅ‡¶∞‡ßÅ_‡¶∏‡¶Æ‡¶Ø‡¶º> <‡¶∂‡ßá‡¶∑_‡¶∏‡¶Æ‡¶Ø‡¶º>` (‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡ßá)")
        return
        
    await message.reply_text("‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶ü‡¶ø ‡¶ï‡¶æ‡¶ü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá... ‚úÇÔ∏è")
    
    input_video = await message.reply_to_message.download(file_name=os.path.join(TEMP_DIR, f"{message.reply_to_message.video.file_id}_original.mp4"), progress=progress_callback)
    output_video = os.path.join(TEMP_DIR, f"{message.reply_to_message.video.file_id}_cut.mp4")
    
    try:
        await asyncio.to_thread(
            ffmpeg_extract_subclip, input_video, start_time, end_time, targetname=output_video
        )
        await message.reply_video(output_video, caption="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ü‡¶æ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶ü‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá‡•§")
    except Exception as e:
        logger.error(f"Error while cutting video: {e}")
        await message.reply_text("‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶æ‡¶ü‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
    finally:
        os.remove(input_video)
        if os.path.exists(output_video):
            os.remove(output_video)

@app.on_message(filters.video & filters.private)
async def video_handler(client: Client, message: Message):
    """Handles video messages to compress them."""
    await message.reply_text("‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßá‡¶Ø‡¶º‡ßá‡¶õ‡¶ø! ‡¶è‡¶ü‡¶ø ‡¶ï‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá... üé¨")
    
    input_video = await message.download(file_name=os.path.join(TEMP_DIR, f"{message.video.file_id}_original.mp4"), progress=progress_callback)
    output_video = os.path.join(TEMP_DIR, f"{message.video.file_id}_compressed.mp4")
    
    success = await convert_video(input_video, output_video, message)
    
    if success and os.path.exists(output_video):
        await message.reply_video(output_video, caption="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶ü‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá‡•§ ‚ú®")
    else:
        await message.reply_text("‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
    
    # Cleanup
    if os.path.exists(input_video):
        os.remove(input_video)
    if os.path.exists(output_video):
        os.remove(output_video)

def main() -> None:
    """‡¶¨‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"""
    run_flask_and_ping()
    try:
        app.run()
    except (BotMethodInvalid, AuthKeyUnregistered) as e:
        logger.error(f"‡¶Ö‡¶™‡ßç‡¶∞‡¶Æ‡¶æ‡¶£‡¶ø‡¶§ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡¶æ API ‡¶π‡ßç‡¶Ø‡¶æ‡¶∂: {e}")
        logger.error("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡¶æ API ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
    except Exception as e:
        logger.error(f"‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá: {e}")

if __name__ == "__main__":
    main()
